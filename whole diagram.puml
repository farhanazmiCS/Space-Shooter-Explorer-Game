@startuml
class com.mygdx.game.engine.screen.ScoreboardScreen {
- CustomInputProcessor inputProcessor
- Button button
- Main game
+ CustomInputProcessor getInputProcessor()
+ void setInputProcessor(CustomInputProcessor)
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.mygdx.game.engine.screen.MainMenuScreen {
- CustomInputProcessor inputProcessor
- Main game
- OrthographicCamera camera
- ArrayList<Button> buttons
- SpriteBatch batch
- Texture texture
- ArrayList<String> buttonImagePath
- boolean soundPlayed
+ void setInputProcessor(CustomInputProcessor)
+ void setButtons(ArrayList<Button>)
+ void show()
+ void render(float)
+ void resize(int,int)
+ void play()
+ void quit()
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class com.mygdx.game.engine.screen.GameOverScreen {
- SpriteBatch batch
- Texture texture
- CustomInputProcessor inputProcessor
- Main game
- ArrayList<Button> buttons
- ArrayList<String> buttonPath
+ CustomInputProcessor getInputProcessor()
+ void setInputProcessor(CustomInputProcessor)
+ ArrayList<Button> getButtons()
+ void setButtons(ArrayList<Button>)
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
+ void quit()
}
class game.components.menu.Button {
- Main game
- Rectangle rectangle
- float x
- float y
- float width
- float height
- String name
- String imgPath
- Texture texture
- SpriteBatch batch
- boolean visibility
- Sprite sprite
- boolean active
+ Texture getTexture()
+ void setTexture(Texture)
+ SpriteBatch getBatch()
+ void setBatch(SpriteBatch)
+ Sprite getSprite()
+ void setSprite(Sprite)
+ boolean getVisibility()
+ void setVisibility(boolean)
+ boolean isActive()
+ void setActive(boolean)
+ void setButtonColor(Color)
+ float getX()
+ void setX(float)
+ float getY()
+ void setY(float)
+ float getWidth()
+ void setWidth(float)
+ float getHeight()
+ void setHeight(float)
+ String getName()
+ void setName(String)
+ Rectangle getBound()
}
class com.mygdx.game.engine.collision.CollidableEntity {
- float prevX
- float prevY
- Rectangle rectangle
+ Rectangle getRectangle()
+ void setRectangle(Rectangle)
+ float getPrevX()
+ void setPrevX(float)
+ float getPrevY()
+ void setPrevY(float)
}
abstract class com.mygdx.game.engine.entity.Entity {
- float x
- float y
- T object
+ float getX()
+ void setX(float)
+ float getY()
+ void setY(float)
+ T getObject()
+ void setObject(T)
# Object clone()
+ boolean equals(Object)
+ int hashCode()
}
class game.components.game.Background {
- Texture texture
- SpriteBatch batch
+ Texture getTexture()
+ void setTexture(Texture)
+ SpriteBatch getBatch()
+ void setBatch(SpriteBatch)
}
class com.mygdx.game.engine.input.CustomInputProcessor {
+ boolean mouseClicked(int)
+ boolean keyDown(int)
+ boolean keyUp(int)
+ boolean keyTyped(char)
+ boolean touchDown(int,int,int,int)
+ boolean touchUp(int,int,int,int)
+ boolean touchDragged(int,int,int)
+ boolean mouseMoved(int,int)
+ boolean scrolled(float,float)
+ boolean mouseHoverOver(T)
}
class game.components.game.TriviaOption {
- Boolean isCorrect
+ Boolean getCorrect()
+ void setCorrect(Boolean)
}
class game.components.game.TriviaQuestion {
- String question
- ArrayList<TriviaOption> optionButtons
+ String getQuestion()
+ void setQuestion(String)
+ ArrayList<TriviaOption> getOptionButtons()
+ void setOptionButtons(ArrayList<TriviaOption>)
}
class com.mygdx.game.engine.screen.storyboard.StoryboardScreen {
- String imgPath
- Texture texture
- SpriteBatch batch
- Main game
- CustomInputProcessor inputProcessor
- OrthographicCamera camera
- Button nextButton
- float buttonShowDelay
- Timer.Task buttonShowTask
- int current
+ int getCurrent()
+ void setCurrent(int)
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
+ void next()
}
class com.mygdx.game.engine.screen.ScreenManager {
- Main game
+ void createScreenButtons(int,ArrayList<Button>,float,ArrayList<String>)
+ ArrayList<StoryboardScreen> generateStoryboards(ArrayList<String>)
}
class game.components.game.Laser {
- String imgName
- Sprite sprite
- float width
- float height
- float speed
- SpriteBatch batch
+ SpriteBatch getBatch()
+ void setBatch(SpriteBatch)
+ String getImgName()
+ void setImgName(String)
+ Sprite getSprite()
+ void setSprite(Sprite)
+ float getWidth()
+ void setWidth(float)
+ float getHeight()
+ void setHeight(float)
+ float getSpeed()
+ void setSpeed(float)
}
class com.mygdx.game.engine.screen.PauseScreen {
- SpriteBatch batch
- Texture texture
- CustomInputProcessor inputProcessor
- Main game
- ArrayList<Button> buttons
- ArrayList<String> buttonPath
+ CustomInputProcessor getInputProcessor()
+ void setInputProcessor(CustomInputProcessor)
+ ArrayList<Button> getButtons()
+ void setButtons(ArrayList<Button>)
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
+ void quit()
}
class com.mygdx.game.engine.sound.SoundManager {
- {static} Music menuMusic
- {static} Music gameMusic
- {static} Music controlMusic
- {static} Music scoreMusic
- {static} Music pauseMusic
- {static} Music storyMusic
- {static} Sound buttonHover
- {static} Sound buttonClick
- {static} boolean isPlaying
+ {static} void playMusic(ScreenType)
+ {static} void stopMusic()
+ {static} boolean isPlaying()
+ void playButtonHover()
+ {static} void playButtonClick()
+ void dispose()
}
enum com.mygdx.game.engine.sound.ScreenType {
+  MAIN_MENU
+  GAME
+  CONTROL
+  SCORE
+  PAUSE
+  STORY
}
interface com.mygdx.game.engine.collision.CollisionManager {
~ boolean asteroidCollision(CollidableEntity<Player>,CollidableEntity<Asteroid>)
~ boolean laserCollision(CollidableEntity,ArrayList<CollidableEntity<Laser>>)
}
class com.mygdx.game.engine.screen.TriviaScreen {
- SpriteBatch batch
- Texture texture
- CustomInputProcessor inputProcessor
- Main game
- TriviaQuestion triviaQuestion
- ArrayList<TriviaQuestion> triviaQuestions
- Timer.Task resumeGameTask
+ CustomInputProcessor getInputProcessor()
+ void setInputProcessor(CustomInputProcessor)
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class game.components.game.UFO {
- String imgPath
- String dir
- float speed
- Texture texture
- ArrayList<CollidableEntity<Laser>> lasers
- Rectangle rectangle
- int health
- long lastShotTime
- long shotDelay
+ float getSpeed()
+ void setSpeed(float)
+ Texture getTexture()
+ void setTexture(Texture)
+ int getHealth()
+ void setHealth(int)
+ void moveUFO(CollidableEntity,int,int)
+ void moveLeft(CollidableEntity)
+ void moveRight(CollidableEntity)
+ void moveDown(CollidableEntity)
+ long fireWeapon(CollidableEntity)
+ void moveLasers(CollidableEntity<UFO>)
+ ArrayList<CollidableEntity<Laser>> getLasers()
}
class game.components.game.HealthBar {
- ShapeRenderer shapeRenderer
- SpriteBatch batch
- BitmapFont font
- int startingX
- int startingY
- int width
- int height
+ void drawHealthBars(ArrayList<CollidableEntity<Player>>)
+ ShapeRenderer getShapeRenderer()
+ void setShapeRenderer(ShapeRenderer)
+ SpriteBatch getBatch()
+ void setBatch(SpriteBatch)
+ BitmapFont getFont()
+ void setFont(BitmapFont)
+ int getStartingX()
+ void setStartingX(int)
+ int getStartingY()
+ void setStartingY(int)
+ int getWidth()
+ void setWidth(int)
+ int getHeight()
+ void setHeight(int)
}
class com.mygdx.game.engine.entity.EntityManager {
- ArrayList<CollidableEntity<Player>> players
- ArrayList<CollidableEntity<Asteroid>> asteroids
- ArrayList<CollidableEntity<UFO>> UFOs
- ArrayList<Texture> fallingObjectImages
+ void moveLasers()
+ long spawnLasers(CustomInputProcessor,CollidableEntity<Player>)
+ long spawnAsteroids(int,int)
+ int moveFallingObject()
+ ArrayList<CollidableEntity<Asteroid>> getAsteroids()
+ void setAsteroids(ArrayList<CollidableEntity<Asteroid>>)
+ ArrayList<CollidableEntity<Player>> getPlayers()
+ void setPlayers(int,int)
+ ArrayList<Texture> getFallingObjectImages()
+ ArrayList<CollidableEntity<UFO>> getUFOs()
+ void setFallingObjectImages(ArrayList<Texture>)
+ void resetFailingObjects()
+ void spawnUFO()
+ boolean asteroidCollision(CollidableEntity<Player>,CollidableEntity<Asteroid>)
+ boolean laserCollision(CollidableEntity,ArrayList<CollidableEntity<Laser>>)
}
class com.mygdx.game.engine.screen.GameScreen {
- Main game
- Button pauseButton
- OrthographicCamera camera
- long lastDropTime
- long lastShootTime
- long lastShootTimeUFO
- CustomInputProcessor inputProcessor
- Background background
- Viewport viewport
- int backgroundOffset
- SpriteBatch batch
- HealthBar healthBars
- float spawnRate
- float spawnRateMultiplier
- float lastTimeUFOSpawned
- int distance
+ Button getPauseButton()
+ void setPauseButton(Button)
+ long getLastDropTime()
+ void setLastDropTime(long)
+ CustomInputProcessor getInputProcessor()
+ void setInputProcessor(CustomInputProcessor)
+ float getSpawnRate()
+ float getSpawnRateMultiplier()
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void quit()
+ void dispose()
}
class game.components.game.Afterburner {
- String imgPath
- Texture texture
- SpriteBatch batch
- float x
- float y
- boolean visibility
+ String getImgPath()
+ void setImgPath(String)
+ Texture getTexture()
+ void setTexture(Texture)
+ SpriteBatch getBatch()
+ void setBatch(SpriteBatch)
+ float getX()
+ void setX(float)
+ float getY()
+ void setY(float)
+ boolean getVisibility()
+ void setVisibility(boolean)
}
class game.components.game.Asteroid {
- Texture image
- float width
- float height
+ Texture getImage()
+ void setImage(Texture)
+ float getWidth()
+ void setWidth(float)
+ float getHeight()
+ void setHeight(float)
}
interface com.mygdx.game.engine.behavior.BehaviourManager {
~ void moveUFO(CollidableEntity,int,int)
~ long fireWeapon(CollidableEntity)
}
class com.mygdx.game.engine.lifecycle.Main {
- ScreenManager screenManager
- MainMenuScreen mainMenuScreen
- GameScreen gameScreen
- PauseScreen pauseScreen
- GameOverScreen gameOverScreen
- ScoreboardScreen scoreboardScreen
- TriviaScreen triviaScreen
- ResultScreen resultScreen
- SoundManager soundManager
~ ControlScreen controlScreen
~ ArrayList<StoryboardScreen> storyboards
~ ArrayList<String> storyboardImgPath
+ EntityManager entityManager
~ Texture img_test
- SpriteBatch batch
- BitmapFont font
+ int HEIGHT
+ int WIDTH
+ ScreenManager getScreenManager()
+ void setScreenManager(ScreenManager)
+ SoundManager getSoundManager()
+ void setSoundManager(SoundManager)
+ ControlScreen getControlScreen()
+ void setControlScreen(ControlScreen)
+ ArrayList<StoryboardScreen> getStoryboards()
+ void setStoryboards(ArrayList<StoryboardScreen>)
+ ArrayList<String> getStoryboardImgPath()
+ void setStoryboardImgPath(ArrayList<String>)
+ SpriteBatch getBatch()
+ void setBatch(SpriteBatch)
+ BitmapFont getFont()
+ void setFont(BitmapFont)
+ GameScreen getGameScreen()
+ void setGameScreen(GameScreen)
+ PauseScreen getPauseScreen()
+ GameOverScreen getGameOverScreen()
+ void setGameOverScreen(GameOverScreen)
+ void setPauseScreen(PauseScreen)
+ MainMenuScreen getMainMenuScreen()
+ void setMainMenuScreen(MainMenuScreen)
+ ScoreboardScreen getScoreboardScreen()
+ void setScoreboardScreen(ScoreboardScreen)
+ TriviaScreen getTriviaScreen()
+ void setTriviaScreen(TriviaScreen)
+ ResultScreen getResultScreen()
+ void setResultScreen(ResultScreen)
+ void create()
+ void render()
+ void dispose()
}
class com.mygdx.game.engine.screen.ControlScreen {
- String imgPath
- Texture texture
- SpriteBatch batch
- Main game
- CustomInputProcessor inputProcessor
- OrthographicCamera camera
- Button playButton
- float buttonShowDelay
- Timer.Task buttonShowTask
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
+ void play()
}
class com.mygdx.game.engine.collision.NonCollidableEntity {
}
class com.mygdx.game.engine.screen.ResultScreen {
- SpriteBatch batch
- Texture texture
- CustomInputProcessor inputProcessor
- Main game
- float buttonShowDelay
- Timer.Task buttonShowTask
- Button nextButton
- String resultBG
+ CustomInputProcessor getInputProcessor()
+ void setInputProcessor(CustomInputProcessor)
+ String getResultBG()
+ void setResultBG(String)
+ void show()
+ void render(float)
+ void resize(int,int)
+ void pause()
+ void resume()
+ void hide()
+ void dispose()
}
class game.components.game.Player {
- String imgName
- Sprite sprite
- float width
- float height
- float speed
- int[] mainKeyboardInputs
- int[] altKeyboardInputs
- int score
- ArrayList<CollidableEntity<Laser>> lasers
- int maxHealth
- int currentHealth
- Afterburner afterburner
+ Afterburner getAfterburner()
+ void setAfterburner(Afterburner)
+ String getImgName()
+ void setImgName(String)
+ Sprite getSprite()
+ void setSprite(Sprite)
+ float getWidth()
+ void setWidth(float)
+ float getHeight()
+ void setHeight(float)
+ float getSpeed()
+ void setSpeed(float)
+ int[] getMainKeyboardInputs()
+ void setMainKeyboardInputs(int[])
+ int[] getAltKeyboardInputs()
+ void setAltKeyboardInputs(int[])
+ int getScore()
+ void setScore(int)
+ ArrayList<CollidableEntity<Laser>> getLasers()
+ void setLasers(ArrayList<CollidableEntity<Laser>>)
+ int getMaxHealth()
+ void setMaxHealth(int)
+ int getCurrentHealth()
+ void setCurrentHealth(int)
+ void limitPlayerMovement(CollidableEntity<Player>,Integer,Integer)
+ int movePlayer(CollidableEntity<Player>,CustomInputProcessor)
}


com.badlogic.gdx.Screen <|.. com.mygdx.game.engine.screen.ScoreboardScreen
com.badlogic.gdx.Screen <|.. com.mygdx.game.engine.screen.MainMenuScreen
com.mygdx.game.engine.screen.ScreenManager <|-- com.mygdx.game.engine.screen.MainMenuScreen
com.badlogic.gdx.Screen <|.. com.mygdx.game.engine.screen.GameOverScreen
com.mygdx.game.engine.screen.ScreenManager <|-- com.mygdx.game.engine.screen.GameOverScreen
com.mygdx.game.engine.entity.Entity <|-- com.mygdx.game.engine.collision.CollidableEntity
com.mygdx.game.engine.entity.Cloneable <|.. com.mygdx.game.engine.entity.Entity
com.badlogic.gdx.InputProcessor <|.. com.mygdx.game.engine.input.CustomInputProcessor
game.components.menu.Button <|-- game.components.game.TriviaOption
com.badlogic.gdx.Screen <|.. com.mygdx.game.engine.screen.storyboard.StoryboardScreen
com.badlogic.gdx.Screen <|.. com.mygdx.game.engine.screen.PauseScreen
com.mygdx.game.engine.screen.ScreenManager <|-- com.mygdx.game.engine.screen.PauseScreen
com.badlogic.gdx.Screen <|.. com.mygdx.game.engine.screen.TriviaScreen
com.mygdx.game.engine.screen.ScreenManager <|-- com.mygdx.game.engine.screen.TriviaScreen
com.mygdx.game.engine.behavior.BehaviourManager <|.. game.components.game.UFO
com.mygdx.game.engine.collision.CollisionManager <|.. com.mygdx.game.engine.entity.EntityManager
com.badlogic.gdx.Screen <|.. com.mygdx.game.engine.screen.GameScreen
com.badlogic.gdx.Game <|-- com.mygdx.game.engine.lifecycle.Main
com.badlogic.gdx.Screen <|.. com.mygdx.game.engine.screen.ControlScreen
com.mygdx.game.engine.entity.Entity <|-- com.mygdx.game.engine.collision.NonCollidableEntity
com.badlogic.gdx.Screen <|.. com.mygdx.game.engine.screen.ResultScreen
com.mygdx.game.engine.screen.ScreenManager <|-- com.mygdx.game.engine.screen.ResultScreen
@enduml